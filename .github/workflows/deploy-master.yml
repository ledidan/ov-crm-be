name: Deploy CRM Backend

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment variables
        run: |
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "ECR_REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO }}" >> $GITHUB_ENV

      - name: Build & Push Docker Image
        run: |
          docker build -t $ECR_REPO .
          docker tag $ECR_REPO:latest $ECR_REPO:latest
          docker push $ECR_REPO:latest

      - name: Deploy on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Upload the .env file from GitHub repo (if available)
          scp -o StrictHostKeyChecking=no -i private_key.pem .env $EC2_USER@$EC2_HOST:/home/$EC2_USER/ov-crm-be/.env || true

          # Ensure the project directory exists
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "mkdir -p /home/$EC2_USER/ov-crm-be"

          # Ensure the .env file exists
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "[[ -f /home/$EC2_USER/ov-crm-be/.env ]] || touch /home/$EC2_USER/ov-crm-be/.env"

          # Set correct permissions
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "chmod 644 /home/$EC2_USER/ov-crm-be/.env"

          # Authenticate Docker with AWS ECR
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO"

          # Stop any process using port 5000
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "sudo fuser -k 5000/tcp || true"

          # Stop and remove the old container if it exists
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "docker stop crm-backend 2>/dev/null || true && docker rm crm-backend 2>/dev/null || true"
          
          # Remove old Docker images (except the latest one)
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "docker image prune -af --filter 'until=24h' || true"

          # Pull the latest image
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "docker pull $ECR_REPO:latest"

          # Run the new container with the correct .env file
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "docker run --env-file /home/$EC2_USER/ov-crm-be/.env -d -p 5000:5000 --name crm-backend $ECR_REPO:latest"

          # Verify the container is running
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "docker ps -a | grep crm-backend || echo 'ðŸš¨ ERROR: Container did not start properly!'"
