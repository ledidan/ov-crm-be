// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerLibrary.Data;

#nullable disable

namespace ServerLibrary.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250408082227_update-Activity-service")]
    partial class updateActivityservice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ActivityCustomer", b =>
                {
                    b.Property<int>("ActivitiesId")
                        .HasColumnType("int");

                    b.Property<int>("CustomersId")
                        .HasColumnType("int");

                    b.HasKey("ActivitiesId", "CustomersId");

                    b.HasIndex("CustomersId");

                    b.ToTable("ActivityCustomer");
                });

            modelBuilder.Entity("ActivityOrder", b =>
                {
                    b.Property<int>("ActivitiesId")
                        .HasColumnType("int");

                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.HasKey("ActivitiesId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("ActivityOrder");
                });

            modelBuilder.Entity("CustomerOrder", b =>
                {
                    b.Property<int>("CustomersId")
                        .HasColumnType("int");

                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.HasKey("CustomersId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("CustomerOrder");
                });

            modelBuilder.Entity("Data.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityCategory")
                        .HasColumnType("longtext");

                    b.Property<string>("ActivityName")
                        .HasColumnType("longtext");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("ContactName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CustomerCareTicketID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("Duplicate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EventEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EventStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAllDay")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsReminder")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsRepeat")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsSendNotificationEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModuleType")
                        .HasColumnType("longtext");

                    b.Property<string>("OfficeEmail")
                        .HasColumnType("longtext");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("PartnerName")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Place")
                        .HasColumnType("longtext");

                    b.Property<string>("PriorityID")
                        .HasColumnType("longtext");

                    b.Property<int?>("RelatedUsersID")
                        .HasColumnType("int");

                    b.Property<string>("RelatedUsersName")
                        .HasColumnType("longtext");

                    b.Property<string>("RemindID")
                        .HasColumnType("longtext");

                    b.Property<bool?>("SendEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("StatusID")
                        .HasColumnType("longtext");

                    b.Property<int?>("SupportTicketID")
                        .HasColumnType("int");

                    b.Property<string>("TagColor")
                        .HasColumnType("longtext");

                    b.Property<string>("TagID")
                        .HasColumnType("longtext");

                    b.Property<int?>("TaskOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("TaskOwnerName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Data.Entities.ActivityEmployees", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.HasKey("ActivityId", "EmployeeId", "PartnerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PartnerId");

                    b.ToTable("ActivityEmployees");
                });

            modelBuilder.Entity("Data.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsActivateEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("Data.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAllDay")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Data.Entities.Call", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<bool?>("CallDone")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CallDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CallEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CallGoalID")
                        .HasColumnType("longtext");

                    b.Property<string>("CallID")
                        .HasColumnType("longtext");

                    b.Property<string>("CallName")
                        .HasColumnType("longtext");

                    b.Property<string>("CallRecord")
                        .HasColumnType("longtext");

                    b.Property<string>("CallResult")
                        .HasColumnType("longtext");

                    b.Property<string>("CallResultID")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CallStart")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CallTypeID")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("Calls");
                });

            modelBuilder.Entity("Data.Entities.CompanyJobPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("JobPositionGroupId")
                        .HasColumnType("int");

                    b.Property<string>("JobPositionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("JobTitleGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("PositionCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("CompanyJobPositions");
                });

            modelBuilder.Entity("Data.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountTypeID")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("longtext");

                    b.Property<string>("DepartmentID")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool?>("EmailOptOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("LeadSourceID")
                        .HasColumnType("longtext");

                    b.Property<string>("MailingDistrictID")
                        .HasColumnType("longtext");

                    b.Property<string>("MailingProvinceID")
                        .HasColumnType("longtext");

                    b.Property<string>("MailingStreet")
                        .HasColumnType("longtext");

                    b.Property<string>("MailingWardID")
                        .HasColumnType("longtext");

                    b.Property<string>("MailingZip")
                        .HasColumnType("longtext");

                    b.Property<string>("Mobile")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OfficeEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("OfficeTel")
                        .HasColumnType("longtext");

                    b.Property<string>("OtherPhone")
                        .HasColumnType("longtext");

                    b.Property<int?>("OwnerID")
                        .HasColumnType("int");

                    b.Property<string>("OwnerIDName")
                        .HasColumnType("longtext");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("PartnerName")
                        .HasColumnType("longtext");

                    b.Property<bool?>("PhoneOptOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SalutationID")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingDistrictID")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingProvinceID")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingStreet")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingWardID")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingZip")
                        .HasColumnType("longtext");

                    b.Property<string>("TitleID")
                        .HasColumnType("longtext");

                    b.Property<string>("Zalo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Data.Entities.ContactEmployees", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.HasKey("ContactId", "EmployeeId", "PartnerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PartnerId");

                    b.ToTable("ContactEmployees");
                });

            modelBuilder.Entity("Data.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("AccountReferredID")
                        .HasColumnType("longtext");

                    b.Property<string>("AccountShortName")
                        .HasColumnType("longtext");

                    b.Property<string>("AccountTypeID")
                        .HasColumnType("longtext");

                    b.Property<string>("AnnualRevenueID")
                        .HasColumnType("longtext");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("BankAccount")
                        .HasColumnType("longtext");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingCode")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingCountryID")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingDistrictID")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingLat")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingLong")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingProvinceID")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingStreet")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingWardID")
                        .HasColumnType("longtext");

                    b.Property<string>("BudgetCode")
                        .HasColumnType("longtext");

                    b.Property<string>("BusinessTypeID")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CelebrateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CustomerSinceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Debt")
                        .HasColumnType("longtext");

                    b.Property<string>("DebtLimit")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Fax")
                        .HasColumnType("longtext");

                    b.Property<string>("GenderID")
                        .HasColumnType("longtext");

                    b.Property<string>("Identification")
                        .HasColumnType("longtext");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IndustryID")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDistributor")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOldCustomer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPartner")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPersonal")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastVisitDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext");

                    b.Property<string>("LeadSourceID")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NoOfEmployeeID")
                        .HasColumnType("longtext");

                    b.Property<string>("NumberOfDaysOwed")
                        .HasColumnType("longtext");

                    b.Property<string>("OfficeEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("OfficeTel")
                        .HasColumnType("longtext");

                    b.Property<string>("OwnerID")
                        .HasColumnType("longtext");

                    b.Property<string>("OwnerIDName")
                        .HasColumnType("longtext");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("RevenueDetail")
                        .HasColumnType("longtext");

                    b.Property<string>("SectorText")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingCountryID")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingDistrictID")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingLat")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingLong")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingProvinceID")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingStreet")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingWardID")
                        .HasColumnType("longtext");

                    b.Property<string>("TaxCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Data.Entities.CustomerCare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("longtext");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CelebrateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CountryID")
                        .HasColumnType("longtext");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerCareNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DistrictID")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Mobile")
                        .HasColumnType("longtext");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("longtext");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("PartnerName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProvinceID")
                        .HasColumnType("longtext");

                    b.Property<string>("RateID")
                        .HasColumnType("longtext");

                    b.Property<string>("ReasonID")
                        .HasColumnType("longtext");

                    b.Property<int?>("RelatedUsersID")
                        .HasColumnType("int");

                    b.Property<int?>("SaleOrderID")
                        .HasColumnType("int");

                    b.Property<string>("SaleOrderNo")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SubscriptionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SubscriptionStatusID")
                        .HasColumnType("longtext");

                    b.Property<string>("TagID")
                        .HasColumnType("longtext");

                    b.Property<string>("TaxCode")
                        .HasColumnType("longtext");

                    b.Property<string>("WardID")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("CustomerCares");
                });

            modelBuilder.Entity("Data.Entities.CustomerContacts", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "ContactId", "PartnerId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PartnerId");

                    b.ToTable("CustomerContacts");
                });

            modelBuilder.Entity("Data.Entities.CustomerEmployees", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "EmployeeId", "PartnerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PartnerId");

                    b.ToTable("CustomerEmployees");
                });

            modelBuilder.Entity("Data.Entities.EmailVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EmailVerifications");
                });

            modelBuilder.Entity("Data.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CustomerCareId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<int?>("JobPositionGroupId")
                        .HasColumnType("int");

                    b.Property<int>("JobStatus")
                        .HasColumnType("int");

                    b.Property<int?>("JobTitleGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OfficeEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("OfficePhone")
                        .HasColumnType("longtext");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Resignation")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("SignedContractDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("SignedProbationaryContract")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SupportTicketId")
                        .HasColumnType("int");

                    b.Property<string>("TaxIdentificationNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CustomerCareId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("SupportTicketId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Data.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<decimal?>("AmountSummary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("BankAccount")
                        .HasColumnType("longtext");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingCode")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingCountryID")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingDistrictID")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingLat")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingLong")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingProvinceID")
                        .HasColumnType("longtext");

                    b.Property<int?>("BuyerId")
                        .HasColumnType("int");

                    b.Property<string>("BuyerName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrencyTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<double?>("DiscountSummary")
                        .HasColumnType("double");

                    b.Property<string>("InvoiceAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("InvoiceRequestName")
                        .HasColumnType("longtext");

                    b.Property<string>("InvoiceTypeId")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsInvoicePaper")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerIdName")
                        .HasColumnType("longtext");

                    b.Property<int?>("OwnerTaskExecuteId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerTaskExecuteName")
                        .HasColumnType("longtext");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentTypeId")
                        .HasColumnType("longtext");

                    b.Property<string>("RecipientEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("RecipientName")
                        .HasColumnType("longtext");

                    b.Property<string>("RecipientPhone")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StatusID")
                        .HasColumnType("longtext");

                    b.Property<string>("TaxBudgetCode")
                        .HasColumnType("longtext");

                    b.Property<double?>("TaxSummary")
                        .HasColumnType("double");

                    b.Property<decimal?>("ToCurrencyAfterDiscountSummary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("ToCurrencySummary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("TotalSummary")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Data.Entities.InvoiceEmployees", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId", "EmployeeId", "PartnerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PartnerId");

                    b.ToTable("InvoiceEmployees");
                });

            modelBuilder.Entity("Data.Entities.InvoiceOrders", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "InvoiceId", "PartnerId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PartnerId");

                    b.ToTable("InvoiceOrders");
                });

            modelBuilder.Entity("Data.Entities.JobPositionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JobPositionGroupCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("JobPositionGroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("JobPositionGroups");
                });

            modelBuilder.Entity("Data.Entities.JobTitleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JobTitleGroupCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitleGroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("JobTitleGroups");
                });

            modelBuilder.Entity("Data.Entities.Mission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("MissionName")
                        .HasColumnType("longtext");

                    b.Property<string>("MissionTypeID")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BalanceReceiptAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("BillingAccountID")
                        .HasColumnType("int");

                    b.Property<string>("BillingAccountIDText")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingCode")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingContactID")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingCountryID")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingDistrictID")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingProvinceID")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingStreet")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingWardID")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("BookDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("ContactName")
                        .HasColumnType("longtext");

                    b.Property<string>("ContractNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeadlineDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeliveryStatusID")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("DiscountAfterTaxSummary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("DiscountSummary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvoiceReceivingEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("InvoiceReceivingPhone")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("InvoicedAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool?>("IsContractPartner")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInvoiced")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsSentBill")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsShared")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("LiquidateAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByIdName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("NotPaidAmountSummary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("NumberOfDaysOwed")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerIdName")
                        .HasColumnType("longtext");

                    b.Property<int?>("OwnerTaskExecuteId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerTaskExecuteName")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("PaidAmountSummary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("PayStatusID")
                        .HasColumnType("longtext");

                    b.Property<string>("PayStatusIDText")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("RecordedSale")
                        .HasColumnType("longtext");

                    b.Property<string>("RecordedSaleOrganizationUnitID")
                        .HasColumnType("longtext");

                    b.Property<string>("RecordedSaleUsersID")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("RemainingAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("ReturnedSummary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("RevenueAccountingAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("RevenueRecognitionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RevenueStatusID")
                        .HasColumnType("longtext");

                    b.Property<decimal>("SaleOrderAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("SaleOrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SaleOrderName")
                        .HasColumnType("longtext");

                    b.Property<string>("SaleOrderNo")
                        .HasColumnType("longtext");

                    b.Property<double>("SaleOrderProcessCost")
                        .HasColumnType("double");

                    b.Property<string>("SaleOrderTypeID")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingContactID")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingCountryID")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingDistrictID")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingProvinceID")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingReceivingPerson")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingStreet")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingWardID")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusID")
                        .HasColumnType("longtext");

                    b.Property<string>("TaxCode")
                        .HasColumnType("longtext");

                    b.Property<double?>("TaxSummary")
                        .HasColumnType("double");

                    b.Property<decimal?>("ToCurrencySummary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("TotalReceiptedAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("TotalSummary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("UnInvoicedAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Data.Entities.OrderContacts", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ContactId", "PartnerId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PartnerId");

                    b.ToTable("OrderContacts");
                });

            modelBuilder.Entity("Data.Entities.OrderEmployees", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "EmployeeId", "PartnerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PartnerId");

                    b.ToTable("OrderEmployees");
                });

            modelBuilder.Entity("Data.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailContact")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsOrganization")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("OwnerFullName")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ShortName")
                        .HasColumnType("longtext");

                    b.Property<string>("TaxIdentificationNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("TotalEmployees")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("Data.Entities.PartnerUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("UserId");

                    b.ToTable("PartnerUsers");
                });

            modelBuilder.Entity("Data.Entities.PasswordResetTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PasswordResetTokens");
                });

            modelBuilder.Entity("Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AmountSummary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("ConversionRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ConversionUnit")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Equation")
                        .HasColumnType("longtext");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("InventoryItemID")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsFollowSerialNumber")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSetProduct")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsSystem")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUseTax")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OldProductCode")
                        .HasColumnType("longtext");

                    b.Property<string>("OperatorID")
                        .HasColumnType("longtext");

                    b.Property<int?>("OwnerID")
                        .HasColumnType("int");

                    b.Property<string>("OwnerIDName")
                        .HasColumnType("longtext");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<bool>("PriceAfterTax")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductGroupID")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductGroupName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductPropertiesID")
                        .HasColumnType("longtext");

                    b.Property<decimal>("PurchasedPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("QuantityDemanded")
                        .HasColumnType("int");

                    b.Property<string>("QuantityFormula")
                        .HasColumnType("longtext");

                    b.Property<int?>("QuantityInstock")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityOrdered")
                        .HasColumnType("int");

                    b.Property<string>("SaleDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SearchTagID")
                        .HasColumnType("longtext");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasColumnType("longtext");

                    b.Property<string>("TagColor")
                        .HasColumnType("longtext");

                    b.Property<string>("TagID")
                        .HasColumnType("longtext");

                    b.Property<string>("TaxID")
                        .HasColumnType("longtext");

                    b.Property<bool?>("Taxable")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("UnitPrice1")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("UnitPrice2")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("UnitPriceFixed")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("UsageUnitID")
                        .HasColumnType("longtext");

                    b.Property<string>("VendorNameID")
                        .HasColumnType("longtext");

                    b.Property<string>("WarrantyDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("WarrantyPeriod")
                        .HasColumnType("longtext");

                    b.Property<string>("WarrantyPeriodTypeID")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("SupplierId");

                    b.HasIndex(new[] { "ProductCode", "PartnerId" }, "Unique_ProductCode_PartnerId")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Data.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool?>("InActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("InventoryCategoryID")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentProductCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCategoryCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductCategoryName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentProductCategoryID");

                    b.HasIndex("PartnerId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Data.Entities.ProductEmployees", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "EmployeeId", "PartnerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PartnerId");

                    b.ToTable("ProductEmployees");
                });

            modelBuilder.Entity("Data.Entities.ProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<string>("BatchNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Brand")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateDispatched")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("InventoryValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("MinimumStockLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("longtext");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext");

                    b.Property<int?>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<int?>("ReturnedQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("StockStatus")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasColumnType("longtext");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("longtext");

                    b.Property<string>("WarehouseLocation")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductInventories");
                });

            modelBuilder.Entity("Data.Entities.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("Data.Entities.RefreshTokenInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokenInfos");
                });

            modelBuilder.Entity("Data.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Data.Entities.SupportTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("longtext");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("ContactName")
                        .HasColumnType("longtext");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CustomerCareCardId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerName")
                        .HasColumnType("longtext");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("PriorityID")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ProcessEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ProcessStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.Property<string>("ReasonID")
                        .HasColumnType("longtext");

                    b.Property<int?>("RelatedUsersID")
                        .HasColumnType("int");

                    b.Property<string>("RequirementTypeID")
                        .HasColumnType("longtext");

                    b.Property<string>("Response")
                        .HasColumnType("longtext");

                    b.Property<string>("SourceID")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusID")
                        .HasColumnType("longtext");

                    b.Property<string>("TaxCode")
                        .HasColumnType("longtext");

                    b.Property<string>("TicketNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("SupportTickets");
                });

            modelBuilder.Entity("Data.Entities.SystemRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SystemRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SysAdmin"
                        });
                });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ActivityCustomer", b =>
                {
                    b.HasOne("Data.Entities.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActivityOrder", b =>
                {
                    b.HasOne("Data.Entities.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerOrder", b =>
                {
                    b.HasOne("Data.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.ActivityEmployees", b =>
                {
                    b.HasOne("Data.Entities.Activity", "Activity")
                        .WithMany("ActivityEmployees")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany("ActivityEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany("ActivityEmployees")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Employee");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.Appointment", b =>
                {
                    b.HasOne("Data.Entities.Activity", "Activity")
                        .WithOne("Appointment")
                        .HasForeignKey("Data.Entities.Appointment", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Data.Entities.Call", b =>
                {
                    b.HasOne("Data.Entities.Activity", "Activity")
                        .WithOne("Call")
                        .HasForeignKey("Data.Entities.Call", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Data.Entities.CompanyJobPosition", b =>
                {
                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.ContactEmployees", b =>
                {
                    b.HasOne("Data.Entities.Contact", "Contact")
                        .WithMany("ContactEmployees")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany("ContactEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany("ContactEmployees")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Employee");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.Customer", b =>
                {
                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.CustomerCare", b =>
                {
                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.CustomerContacts", b =>
                {
                    b.HasOne("Data.Entities.Contact", "Contact")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Customer", "Customer")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Customer");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.CustomerEmployees", b =>
                {
                    b.HasOne("Data.Entities.Customer", "Customer")
                        .WithMany("CustomerEmployees")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany("CustomerEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany("CustomerEmployees")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.Employee", b =>
                {
                    b.HasOne("Data.Entities.CustomerCare", null)
                        .WithMany("Employees")
                        .HasForeignKey("CustomerCareId");

                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.SupportTicket", null)
                        .WithMany("Employees")
                        .HasForeignKey("SupportTicketId");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.Invoice", b =>
                {
                    b.HasOne("Data.Entities.Activity", null)
                        .WithMany("Invoices")
                        .HasForeignKey("ActivityId");

                    b.HasOne("Data.Entities.Customer", null)
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.InvoiceEmployees", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany("InvoiceEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceEmployees")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany("InvoiceEmployees")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Invoice");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.InvoiceOrders", b =>
                {
                    b.HasOne("Data.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceOrders")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Order", "Order")
                        .WithMany("InvoiceOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Order");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.JobPositionGroup", b =>
                {
                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany("JobPositionGroup")
                        .HasForeignKey("PartnerId");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.JobTitleGroup", b =>
                {
                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany("JobTitleGroup")
                        .HasForeignKey("PartnerId");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.Mission", b =>
                {
                    b.HasOne("Data.Entities.Activity", "Activity")
                        .WithOne("Mission")
                        .HasForeignKey("Data.Entities.Mission", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.OrderContacts", b =>
                {
                    b.HasOne("Data.Entities.Contact", "Contact")
                        .WithMany("OrderContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Order", "Order")
                        .WithMany("OrderContacts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany("OrderContacts")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Order");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.OrderEmployees", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany("OrderEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Order", "Order")
                        .WithMany("OrderEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Order");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.PartnerUser", b =>
                {
                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Product", b =>
                {
                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("Data.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Partner");

                    b.Navigation("ProductCategory");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Data.Entities.ProductCategory", b =>
                {
                    b.HasOne("Data.Entities.ProductCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentProductCategoryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCategory");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.ProductEmployees", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany("ProductEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Product", "Product")
                        .WithMany("ProductEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany("ProductEmployees")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Partner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Data.Entities.ProductInventory", b =>
                {
                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Product", "Product")
                        .WithMany("ProductInventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Supplier", "Supplier")
                        .WithMany("ProductInventories")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Partner");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Data.Entities.ProductPrice", b =>
                {
                    b.HasOne("Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Data.Entities.SupportTicket", b =>
                {
                    b.HasOne("Data.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
                {
                    b.HasOne("Data.Entities.SystemRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Activity", b =>
                {
                    b.Navigation("ActivityEmployees");

                    b.Navigation("Appointment");

                    b.Navigation("Call");

                    b.Navigation("Invoices");

                    b.Navigation("Mission");
                });

            modelBuilder.Entity("Data.Entities.Contact", b =>
                {
                    b.Navigation("ContactEmployees");

                    b.Navigation("CustomerContacts");

                    b.Navigation("OrderContacts");
                });

            modelBuilder.Entity("Data.Entities.Customer", b =>
                {
                    b.Navigation("CustomerContacts");

                    b.Navigation("CustomerEmployees");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Data.Entities.CustomerCare", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Data.Entities.Employee", b =>
                {
                    b.Navigation("ActivityEmployees");

                    b.Navigation("ContactEmployees");

                    b.Navigation("CustomerEmployees");

                    b.Navigation("InvoiceEmployees");

                    b.Navigation("OrderEmployees");

                    b.Navigation("ProductEmployees");
                });

            modelBuilder.Entity("Data.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceEmployees");

                    b.Navigation("InvoiceOrders");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.Navigation("InvoiceOrders");

                    b.Navigation("OrderContacts");

                    b.Navigation("OrderEmployees");
                });

            modelBuilder.Entity("Data.Entities.Partner", b =>
                {
                    b.Navigation("ActivityEmployees");

                    b.Navigation("ContactEmployees");

                    b.Navigation("CustomerContacts");

                    b.Navigation("CustomerEmployees");

                    b.Navigation("InvoiceEmployees");

                    b.Navigation("JobPositionGroup");

                    b.Navigation("JobTitleGroup");

                    b.Navigation("OrderContacts");

                    b.Navigation("ProductEmployees");
                });

            modelBuilder.Entity("Data.Entities.Product", b =>
                {
                    b.Navigation("ProductEmployees");

                    b.Navigation("ProductInventories");
                });

            modelBuilder.Entity("Data.Entities.ProductCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Data.Entities.Supplier", b =>
                {
                    b.Navigation("ProductInventories");
                });

            modelBuilder.Entity("Data.Entities.SupportTicket", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
